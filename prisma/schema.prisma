// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  email     String   @unique @db.VarChar
  role      String   @default("admin") @db.VarChar
  name      String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  teachers              Teacher[]
  recoveryTypesCreated  RecoveryType[]      @relation("CreatedBy")
  activitiesCreated     RecoveryActivity[]  @relation("CreatedBy")
  activitiesApproved    RecoveryActivity[]  @relation("ApprovedBy")
  activityLogs          ActivityLog[]
  systemConfigsUpdated SystemConfig[]

  @@map("users")
}

model SchoolYear {
  id         String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name       String    @unique @db.VarChar
  startDate  DateTime  @map("start_date") @db.Timestamptz
  endDate    DateTime  @map("end_date") @db.Timestamptz
  isActive   Boolean?  @default(false) @map("is_active")
  weeksCount Int       @map("weeks_count")
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  teacherBudgets     TeacherBudget[]
  recoveryActivities RecoveryActivity[]

  @@map("school_years")
}

model Teacher {
  id        String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  cognome   String    @db.VarChar
  nome      String    @db.VarChar
  email     String?   @unique @db.VarChar
  userId    String?   @unique @map("user_id") @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  user               User?              @relation(fields: [userId], references: [id])
  teacherBudgets     TeacherBudget[]
  recoveryActivities RecoveryActivity[]

  @@map("teachers")
}

model RecoveryType {
  id              String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  name            String    @unique @db.VarChar
  description     String?   @db.Text
  color           String?   @default("#3B82F6") @db.VarChar
  isActive        Boolean?  @default(true) @map("is_active")
  requiresApproval Boolean? @default(false) @map("requires_approval")
  defaultDuration Int       @map("default_duration")
  createdBy       String    @map("created_by") @db.Uuid
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  creator            User               @relation("CreatedBy", fields: [createdBy], references: [id])
  recoveryActivities RecoveryActivity[]

  @@map("recovery_types")
}

model TeacherBudget {
  id            String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  teacherId     String    @map("teacher_id") @db.Uuid
  schoolYearId  String    @map("school_year_id") @db.Uuid
  minutesWeekly Int       @map("minutes_weekly")
  minutesAnnual Int       @map("minutes_annual")
  modulesAnnual Int       @map("modules_annual")
  minutesUsed   Int?      @default(0) @map("minutes_used")
  modulesUsed   Int?      @default(0) @map("modules_used")
  importDate    DateTime  @map("import_date") @db.Timestamptz
  importSource  String    @map("import_source") @db.VarChar
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  teacher    Teacher    @relation(fields: [teacherId], references: [id])
  schoolYear SchoolYear @relation(fields: [schoolYearId], references: [id])

  @@map("teacher_budgets")
}

model RecoveryActivity {
  id               String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  teacherId        String    @map("teacher_id") @db.Uuid
  schoolYearId     String    @map("school_year_id") @db.Uuid
  recoveryTypeId   String    @map("recovery_type_id") @db.Uuid
  date             DateTime  @db.Timestamptz
  durationMinutes  Int       @map("duration_minutes")
  modulesEquivalent Int      @map("modules_equivalent")
  title            String    @db.VarChar
  description      String?   @db.Text
  status           String?   @default("completed") @db.VarChar
  createdBy        String    @map("created_by") @db.Uuid
  approvedBy       String?   @map("approved_by") @db.Uuid
  approvedAt       DateTime? @map("approved_at") @db.Timestamptz
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  teacher      Teacher      @relation(fields: [teacherId], references: [id])
  schoolYear   SchoolYear   @relation(fields: [schoolYearId], references: [id])
  recoveryType RecoveryType @relation(fields: [recoveryTypeId], references: [id])
  creator      User         @relation("CreatedBy", fields: [createdBy], references: [id])
  approver     User?        @relation("ApprovedBy", fields: [approvedBy], references: [id])

  @@map("recovery_activities")
}

model ActivityLog {
  id        String    @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  action    String    @db.VarChar
  tableName String    @map("table_name") @db.VarChar
  recordId  String?   @map("record_id") @db.Uuid
  oldValues Json?     @map("old_values") @db.JsonB
  newValues Json?     @map("new_values") @db.JsonB
  ipAddress String?   @map("ip_address") @db.VarChar
  userAgent String?   @map("user_agent") @db.Text
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model SystemConfig {
  id          String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  key         String   @unique @db.VarChar
  value       String   @db.Text
  description String?  @db.Text
  updatedBy   String   @map("updated_by") @db.Uuid
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  // Relations
  updater User @relation(fields: [updatedBy], references: [id])

  @@map("system_configs")
}